// lalrpop convention
grammar;

// lexer behavior
match {
  // skip whitespaces
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  // default behavior
  _
}

// Define CompUnit which return type is String
// After parsing, the behavior will be returning the value of FuncDef
pub CompUnit: String = <func_def: FuncDef> => func_def;

// Similar to CompUnit
FuncDef: String = {
  <func_type: FuncType> <id: Ident> "(" ")" <block: Block> => {
    format!("{} {}() {}", func_type, id, block)
  }
}

FuncType: String = "int" => "int".to_string();

Block: String = "{" <stmt: Stmt> "}" => format!("{{ {} }}", stmt);

Stmt: String = "return" <num: Number> ";" => format!("return {};", num);

Number: String = <num: IntConst> => num.to_string();

// If match the pattern, return the matched string
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string(); // "<>" refers to the matched string

// Define IntConst: Convert the matched string to i32 according to radix
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}