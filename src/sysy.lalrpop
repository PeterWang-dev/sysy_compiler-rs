use crate::ast::*;

// lalrpop convention
grammar;

// lexer behavior
match {
  // skip whitespaces
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/" => {},
  // default behavior
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { func_def };

// Similar to CompUnit
FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef {
      func_type,
      ident,
      block,
    }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { stmt };

Stmt: Stmt = "return" <expr: Expr> ";" => Stmt { expr };

Expr: Expr = <expr: UnaryExpr> => Expr::UnaryExpr(expr);

UnaryExpr: UnaryExpr = {
  <expr: PrimaryExpr> => UnaryExpr::PrimaryExpr(expr),
  <op: UnaryOp> <expr: UnaryExpr> => UnaryExpr::Unary(op, Box::new(expr)),
}

PrimaryExpr: PrimaryExpr = {
  "(" <expr: Expr> ")" => PrimaryExpr::Expr(Box::new(expr)),
  <num: Number> => PrimaryExpr::Number(num),
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Pos,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
}

Number: i32 = <val: IntConst> => val;

// If match the pattern, return the matched string
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string(); // "<>" refers to the matched string

// Define IntConst: Convert the matched string to i32 according to radix
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}