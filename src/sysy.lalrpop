use crate::ast::*;

// lalrpop convention
grammar;

// lexer behavior
match {
  // skip whitespaces
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/" => {},
  // default behavior
  _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { func_def };

// Similar to CompUnit
FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef {
      func_type,
      ident,
      block,
    }
  }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <items: (<BlockItem>)*> "}" => Block { items };

BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl(decl),
  <stmt: Stmt> => BlockItem::Stmt(stmt),
}

Decl: Decl = {
  <const_decl: ConstDecl> => Decl::ConstDecl(const_decl),
  <var_decl: VarDecl> => Decl::VarDecl(var_decl),
}

ConstDecl: ConstDecl = {
  "const" <ty: BType> <def: ConstDef> <mut defs:("," <ConstDef>)*> ";" => ConstDecl {
    ty,
    defs: {
      defs.insert(0, def);
      defs
    }
  }
}

BType: BType = "int" => BType::Int;

ConstDef: ConstDef = <ident: Ident> "=" <init_val: ConstInitVal> => ConstDef { ident, init_val };

ConstInitVal: ConstInitVal = <expr: ConstExpr> => ConstInitVal::ConstExpr(expr);

ConstExpr: ConstExpr = <expr: Expr> => ConstExpr::Expr(expr);

VarDecl: VarDecl = {
  <ty: BType> <var_def: VarDef> <mut defs:("," <VarDef>)*> ";" => VarDecl {
    ty,
    defs: {
      defs.insert(0, var_def);
      defs
    }
  }
}

VarDef: VarDef = {
  <ident: Ident> => VarDef::Ident(ident),
  <ident: Ident> "=" <init_val: InitVal> => VarDef::Init(ident, init_val),
}

InitVal: InitVal = <expr: Expr> => InitVal::Expr(expr);

Stmt: Stmt = {
  <lval: LVal> "=" <expr: Expr> ";" => Stmt::Assign(lval, expr),
  <expr: Expr?> ";" => Stmt::Expr(expr),
  <block: Block> => Stmt::Block(block),
  "return" <expr: Expr?> ";" => Stmt::Return(expr),
}

Expr: Expr = <expr: LOrExpr> => Expr::LOrExpr(expr);

PrimaryExpr: PrimaryExpr = {
  "(" <expr: Expr> ")" => PrimaryExpr::Expr(Box::new(expr)),
  <lval: LVal> => PrimaryExpr::LVal(lval),
  <num: Number> => PrimaryExpr::Number(num),
}

LVal: LVal = <ident: Ident> => LVal::Ident(ident);

UnaryExpr: UnaryExpr = {
  <expr: PrimaryExpr> => UnaryExpr::PrimaryExpr(expr),
  <op: UnaryOp> <expr: UnaryExpr> => UnaryExpr::Unary(op, Box::new(expr)),
}

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Positive,
  "-" => UnaryOp::Negative,
  "!" => UnaryOp::LogicalNot,
}

MulExpr: MulExpr = {
  <expr: UnaryExpr> => MulExpr::UnaryExpr(expr),
  <lhs: MulExpr> <op: MulOp> <rhs: UnaryExpr> => MulExpr::Mul(Box::new(lhs), op, rhs),
}

MulOp: MulOp = {
  "*" => MulOp::Multiply,
  "/" => MulOp::Divide,
  "%" => MulOp::Module,
}

AddExpr: AddExpr = {
  <expr: MulExpr> => AddExpr::MulExpr(expr),
  <lhs: AddExpr> <op: AddOp> <rhs: MulExpr> => AddExpr::Add(Box::new(lhs), op, rhs),
}

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Subtract,
}

RelExpr: RelExpr = {
  <expr: AddExpr> => RelExpr::AddExpr(expr),
  <lhs: RelExpr> <op: RelOp> <rhs: AddExpr> => RelExpr::Rel(Box::new(lhs), op, rhs),
}

RelOp: RelOp = {
  "<" => RelOp::Less,
  "<=" => RelOp::LessEqual,
  ">" => RelOp::Greater,
  ">=" => RelOp::GreaterEqual,
}

EqExpr: EqExpr = {
  <expr: RelExpr> => EqExpr::RelExpr(expr),
  <lhs: EqExpr> <op: EqOp> <rhs: RelExpr> => EqExpr::Eq(Box::new(lhs), op, rhs),
}

EqOp: EqOp = {
  "==" => EqOp::Equal,
  "!=" => EqOp::NotEqual,
}

LAndExpr: LAndExpr = {
  <expr: EqExpr> => LAndExpr::EqExpr(expr),
  <lhs: LAndExpr> "&&" <rhs: EqExpr> => LAndExpr::LAnd(Box::new(lhs), rhs),
}

LOrExpr: LOrExpr = {
  <expr: LAndExpr> => LOrExpr::LAndExpr(expr),
  <lhs: LOrExpr> "||" <rhs: LAndExpr> => LOrExpr::LOr(Box::new(lhs), rhs),
}

Number: i32 = <val: IntConst> => val;

// If match the pattern, return the matched string
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string(); // "<>" refers to the matched string

// Define IntConst: Convert the matched string to i32 according to radix
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}